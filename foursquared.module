<?php
// Include our API functions
require_once 'foursquared.api.inc';

/**
 * Implements hook_menu().
 */
function foursquared_menu() {
  $items['admin/config/foursquared'] = array(
    'title' => 'Foursquared Settings',
    'description' => 'Configure API settings for Foursquared.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('foursquared_settings'),
    'access arguments' => array('administer foursquared'),
  );
  
  $items['foursquared/authorize'] = array(
    'title' => 'Handles authorization of the current application to Foursquare.',
    'page callback' => 'foursquared_handle_authorization',
    'access arguments' => array('authorize foursquared'),
    'type' => MENU_CALLBACK,
  );
  
  $items['foursquared/location/%'] = array(
    'title' => 'Handles authorization of the current application to Foursquare.',
    'page callback' => 'foursquared_save_user_location',
    'page arguments' => array(2),
    'access arguments' => array('authorize foursquared'),
    'type' => MENU_CALLBACK,
  );
  
  $items['nearby'] = array(
    'title' => 'Nearby',
    'description' => 'Shows nearby locations of the user if the user has authenticated the current application.',
    'page callback' => 'foursquared_page_nearby',
    'access arguments' => array('authorize foursquared'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function foursquared_permission() {
  return array(
    'authorize foursquared' =>  array(
      'title' => t('Foursquared permissions'),
      'description' => t('Authorize and authenticate with Foursquare.'),
    ),
  );
}

/**
 * Provides the form to configure Foursquared.
 *
 * @return array
 * @author Maarten Jacobs
 */
function foursquared_settings() {
  // Get variables, if set
  global $base_url;
  $client_id = variable_get('foursquared_client_id', '');
  $secret = variable_get('foursquared_secret', '');
  $redirect_uri = variable_get('foursquared_redirect_uri', $base_url . '/foursquared/authorize/');
  $connect_locations = variable_get('foursquared_connect_locations', array('edit_user'));
  
  $form['foursquared_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Foursquare Client ID'),
    '#description' => t('The Client ID Foursquare provides you on registration. This is required for the authorisation process of Foursquare.'),
    '#size' => 80,
    '#maxlength' => 48,
    '#default_value' => $client_id,
  );
  
  $form['foursquared_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Foursquare Secret'),
    '#description' => t('The Secret Foursquare provides you on registration. This is required to request an access token of Foursquare.'),
    '#size' => 80,
    '#maxlength' => 48,
    '#default_value' => $secret,
  );
  
  $form['foursquared_redirect_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Foursquare redirect URI'),
    '#description' => t('The registered redirect URI of your Foursquare application. This is required to request an access token of Foursquare.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $redirect_uri,
  );
  
  $form['foursquared_connect_locations'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Foursquare Connect locations'),
    '#description' => t('Disables or enables the locations where the Foursquare connect button should appear (automatically).'),
    '#options' => array(
      'edit_user' => 'Edit user page, when viewing own user.',
      'view_user' => 'View user page, when viewing own user.'
    ),
    '#default_value' => $connect_locations,
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_user_load().
 */
function foursquared_user_load($users) {
  $result = db_query('SELECT uid, foursquared_access_token AS token, foursquared_authorized AS auth
    FROM {users} 
    WHERE uid IN (:uids)', 
    array(':uids' => array_keys($users))
  );
  foreach ($result as $record) {
    $users[$record->uid]->foursquared = array(
      'authorized' => $record->auth !== 1 ? FALSE : TRUE,
      'access_token' => $record->token
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function foursquared_form_alter(&$form, &$form_state, $form_id) {
  $connect_locations = variable_get('foursquared_connect_locations', array('edit_user'));
  global $user;
  
  switch ($form_id) {
    case 'user_profile_form':
      foursquared_add_location_save_js();
    
      // Is the Edit_User form enabled and is the current user editing themselves?
      $edit_user_allowed = $connect_locations['edit_user'] == 'edit_user';
      $connected = (bool) $user->foursquared_access_token;
      if ($edit_user_allowed && $form['#user']->uid && $form['#user']->uid == $user->uid) {
        $form['foursquared'] = array(
          '#type' => 'fieldset',
          '#title' => t('Foursquare'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#access' => TRUE,
        );
        
        if (!$connected) {
          $form['foursquared']['connect'] = array(
            '#value' => '',
            '#prefix' => '<div>' . foursquared_get_authorization_url(),
            '#suffix' => '</div>',
          );
        } else {
          $form['foursquared']['connect'] = array(
            '#value' => '',
            '#prefix' => '<p>Successfully connected to Foursquare.</p>',
          );
        }
      }
      break;
  }
}

/**
 * Returns the URL to start authorization of Foursquare.
 *
 * @return void
 * @author Maarten Jacobs
 */
function foursquared_get_authorization_url() {
  global $base_url;
  $client_id = variable_get('foursquared_client_id', FALSE);
  $redirect_uri = variable_get('foursquared_redirect_uri', $base_url . '/');
  
  if (!$client_id) {
    
    // TODO: Correct error handling of sites without a client ID
    drupal_set_message('No Client ID has been set for this site. Please enter this information in the settings and try again.');
    drupal_goto('');
    
  } else {
    $base = 'https://foursquare.com/oauth2/authenticate';
    $text = '<img src="' 
        . $base_url . '/' . drupal_get_path('module', 'foursquared') 
        . '/images/connect/connect-blue.png" />';
    return l($text, $base, array(
      'html' => TRUE,
      'query' => array(
        'client_id' => $client_id,
        'redirect_uri' => $redirect_uri,
        'response_type' => 'code'
      )
    ));
  }
}

/**
 * Adds the JS files and inline code to activate the logging of location.
 *
 * @return void
 * @author Maarten Jacobs
 */
function foursquared_add_location_save_js() {
  drupal_add_js(drupal_get_path('module', 'foursquared') . '/js/foursquared_location.js');
}

/**
 * Handles the async (or sync) request to save a user's current location
 *
 * @param string $uid 
 * @param string $location 
 * @return void
 * @author Maarten Jacobs
 */
function foursquared_save_user_location($location) {
  global $user;
  db_query(
    'UPDATE {users} SET foursquared_current_location = :location WHERE uid = :uid',
    array(
      'uid' => $user->uid,
      'location' => $location
    )
  );
  
  drupal_json_output(array('success' => TRUE));
}

/**
 * Implements hook_theme().
 */
function foursquared_theme($existing, $type, $theme, $path) {
  $mod_path = drupal_get_path('module', 'foursquared');
  
  return array(
    'venue_container' => array(
      'arguments' => array('venues' => array()),
      'template' => 'venue_container',
      'path' => $mod_path . '/templates'
    ),
    'venue_item' => array(
      'arguments' => array('venue' => NULL),
      'template' => 'venue_item',
      'path' => $mod_path . '/templates'
    ),
  );
}

/**
 * Returns the page that gives a list of checkins
 *
 * @return void
 * @author Maarten Jacobs
 */
function foursquared_page_nearby() {
  global $user;
  
  $has_location = (bool) $user->foursquared_current_location;
  $has_token = (bool) $user->foursquared_access_token;
  if ($has_location && $has_token) {
    // Retrieve the venues through the API
    $venues = foursquared_get_near_locations($user->foursquared_access_token, $user->foursquared_current_location);
    
    // Handle existence or non-existence of our response
    if (!$venues) {
      drupal_set_message("We're having some difficulties with retrieving venues from Foursquare. Please try again later or contact the admin of this website.");
    } else {
      // Produce our content
      $venue_content = array();
      foreach ($venues as $venue) {
        $venue_content[] = theme('venue_item', array('venue' => $venue));
      }

      // Wrap container around our content.
      $content = theme('venue_container', array('venues' => $venue_content));
      return '<div>' . $content . '</div>';
    }
  }
  else {
    if (!$has_token) {
      drupal_set_message("You haven't authenticated this application with Foursquare yet. Go to the edit page of your profile and connect with Foursquare please.", 'error');
    }
    if (!$has_location) {
      drupal_set_message("We can't seem to find your location. If you haven't allowed tracking of your location, please allow it in your browser settings.", 'error');
    }
  }
  
  // If nothing else has been outputted, output our error messages.
  return '<div>' . theme_status_messages(array('display' => '')) . '</div>';
}